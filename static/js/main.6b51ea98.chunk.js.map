{"version":3,"sources":["AlertContext.ts","components/challenge-24/alphabet.ts","components/challenge-24/Test.tsx","components/challenge-24/Game.tsx","components/challenge-24/randElem.ts","components/challenge-24/censor.ts","components/challenge-24/Problem.tsx","components/challenge-24/Solution.tsx","components/Challenge24.tsx","components/Home.tsx","components/Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AlertContext","createContext","alert","setAlert","alphabet","split","Title","Typography","clicked","data","key","id","description","expected","columns","title","dataIndex","Test","level","dataSource","words","Paragraph","Text","Game","arr","useState","Math","floor","random","length","word","useContext","lives","setLives","correctCharacters","setCorrectCharacters","play","setPlay","style","textAlign","magicWord","allowedCharacters","reduce","acc","cur","includes","censor","prevAlert","displayWord","map","letter","onClick","str","curCorrectCharacters","curLives","Problem","bordered","renderItem","item","Item","Solution","itemLayout","Meta","Challenge24","match","useRouteMatch","path","to","url","Home","Content","Layout","SubMenu","Menu","MyLayout","children","current","setCurrent","minHeight","e","selectedKeys","mode","sm","md","lg","Provider","value","msg","message","closable","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b51ea98.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const AlertContext = createContext<{ alert: string[]; setAlert: any }>({\r\n  alert: [],\r\n  setAlert: \"\",\r\n});\r\n","export const alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\r\n","import { Table, Typography } from \"antd\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst clicked = <>The character that was clicked.</>;\r\n\r\nconst data = [\r\n  {\r\n    key: 1,\r\n    id: \"01\",\r\n    description: \"[Normal] Click on a character that is in the word.\",\r\n    data: clicked,\r\n    expected:\r\n      \"The occurances of the character should no longer be represented with asterisks.\",\r\n  },\r\n  {\r\n    key: 2,\r\n    id: \"02\",\r\n    description: \"[Erroneous] Click on a character that is not in the word.\",\r\n    data: clicked,\r\n    expected: \"The number of lives remaining should decrease.\",\r\n  },\r\n  {\r\n    key: 3,\r\n    id: \"03\",\r\n    description:\r\n      \"[Extreme] Click on a character that is in the word and has already been clicked.\",\r\n    data: clicked,\r\n    expected: \"There should be no visual change.\",\r\n  },\r\n];\r\n\r\nconst columns = [\r\n  {\r\n    title: \"ID\",\r\n    dataIndex: \"id\",\r\n    key: \"id\",\r\n  },\r\n  {\r\n    title: \"Description\",\r\n    dataIndex: \"description\",\r\n    key: \"description\",\r\n  },\r\n  {\r\n    title: \"Test Data\",\r\n    dataIndex: \"data\",\r\n    key: \"data\",\r\n  },\r\n  {\r\n    title: \"Expected Results\",\r\n    dataIndex: \"expected\",\r\n    key: \"expected\",\r\n  },\r\n];\r\n\r\nexport const Test: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Title level={2}>Test</Title>\r\n      <Table dataSource={data} columns={columns} />\r\n    </>\r\n  );\r\n};\r\n","import { Button, Divider, Typography } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\n\r\nimport { AlertContext } from \"../../AlertContext\";\r\nimport { alphabet } from \"./alphabet\";\r\nimport { censor } from \"./censor\";\r\nimport { randElem } from \"./randElem\";\r\nimport { Test } from \"./Test\";\r\n\r\nconst words = [\"hello\", \"bye\"];\r\n\r\nconst { Paragraph, Text } = Typography;\r\n\r\nexport const Game: React.FC = () => {\r\n  const [word] = useState(randElem(words));\r\n\r\n  const { setAlert } = useContext(AlertContext);\r\n\r\n  const [lives, setLives] = useState(5);\r\n  const [correctCharacters, setCorrectCharacters] = useState<string[]>([]);\r\n\r\n  const [play, setPlay] = useState(true);\r\n\r\n  // Checks if the number the user guessed is correct and acts accordingly.\r\n  const checkLetter = (str: string) => {\r\n    if (word.includes(str)) {\r\n      setAlert((prevAlert: string[]) => [\r\n        ...prevAlert,\r\n        \"You guessed correctly!\",\r\n      ]);\r\n\r\n      // Adds the character to the list of correctly guessed characters.\r\n      setCorrectCharacters((curCorrectCharacters) => [\r\n        ...curCorrectCharacters,\r\n        str,\r\n      ]);\r\n    } else {\r\n      setAlert((prevAlert: string[]) => [...prevAlert, \"Wrong, try again.\"]);\r\n\r\n      // In correct choices lose a life.\r\n      setLives((curLives) => curLives - 1);\r\n\r\n      // If they run out of lives they lose.\r\n      if (lives === 0) {\r\n        setAlert((prevAlert: string[]) => [...prevAlert, \"You lose!\"]);\r\n        setPlay(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Magic Fuction\r\n  const displayWord = () => {\r\n    const magicWord = censor(word, correctCharacters);\r\n\r\n    // Checks if the user has guessed all the words correctly.\r\n    if (magicWord === word) {\r\n      setAlert((prevAlert: string[]) => [...prevAlert, \"You win!\"]);\r\n      setPlay(false);\r\n    }\r\n\r\n    return magicWord;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {play ? (\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <Paragraph>{displayWord()}</Paragraph>\r\n          <Paragraph>Your have {lives} lives remaining.</Paragraph>\r\n          {alphabet.map((letter) => (\r\n            <Button key={letter} onClick={() => checkLetter(letter)}>\r\n              {letter}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <Text>Reload the page to play again.</Text>\r\n      )}\r\n      <Divider />\r\n      <Test />\r\n    </>\r\n  );\r\n};\r\n","export const randElem = (arr: string[]) =>\r\n  arr ? arr[Math.floor(Math.random() * arr.length)] : \"\";\r\n","export const censor = (word: string, allowedCharacters: string[]) => {\r\n  return word\r\n    .split(\"\")\r\n    .reduce(\r\n      (acc, cur) => (allowedCharacters.includes(cur) ? acc + cur : acc + \"*\"),\r\n      \"\"\r\n    );\r\n};\r\n","import { List, Typography } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst data = [\r\n  <>\r\n    Create a program that allows users to guess a string one character at a\r\n    time.\r\n  </>,\r\n  <>\r\n    If the user guess a character correctly reveal occurences of that character\r\n    in that string.\r\n  </>,\r\n  <>Characters the user has not guessed should be represented by asterisks.</>,\r\n  <>The user is given 5 incorrect guesses before it's Game Over.</>,\r\n];\r\n\r\nexport const Problem: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Title level={2}>Problem Description</Title>\r\n      <List\r\n        bordered\r\n        dataSource={data}\r\n        renderItem={(item) => <List.Item>{item}</List.Item>}\r\n      ></List>\r\n    </>\r\n  );\r\n};\r\n","import { List, Typography } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nconst data = [\r\n  {\r\n    title: <>OUTPUT 'Guess a character!'</>,\r\n    description: <>Prompts the user to click a Character.</>,\r\n  },\r\n  {\r\n    title: <>OUTPUT magic(word, correctChars)</>,\r\n    description: (\r\n      <>\r\n        Display the word using asterisks. This is done by a magic function which\r\n        takes the word you need to guess and a list of your correctly guessed\r\n        letters as arguements.\r\n      </>\r\n    ),\r\n  },\r\n  {\r\n    title: (\r\n      <>\r\n        DISPLAY ALPHABET AS BUTTON WHERE ONCLICK VALUE AS letter CALLS\r\n        update(word, letter)\r\n      </>\r\n    ),\r\n    description: (\r\n      <>\r\n        Letters of the alphabet will be displayed as buttons. The button will\r\n        call a function that checks if the character is in the string that the\r\n        user is trying to guess.\r\n      </>\r\n    ),\r\n  },\r\n  {\r\n    title: (\r\n      <>\r\n        FUNCTION update(word, letter) RETURNS (letter IN word) THEN (ADD letter\r\n        TO correctChars AND UPDATE) ELSE (lives MINUS 1)\r\n      </>\r\n    ),\r\n    description: (\r\n      <>\r\n        If the guessed is in the word, the function will add it to the array of\r\n        correctly guessed words and then call the magic function which will\r\n        update the word.\r\n        <ol>\r\n          <li>\r\n            If all the words have been guessed correctly we will infom the user\r\n            that they have won the game.\r\n          </li>\r\n          <li>\r\n            Otherwise the program will call itself (asking the user for to click\r\n            a another character, etc...)\r\n          </li>\r\n        </ol>\r\n        Otherwise the program will inform the user that they had guessed\r\n        incorrectly and decrement a life.\r\n        <ol>\r\n          <li>\r\n            If the number of lives is 0 we display that they have lost the game.\r\n          </li>\r\n          <li>Otherwise the program will ask the user to try again.</li>\r\n        </ol>\r\n      </>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const Solution: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Title level={2}>Possible Solution</Title>\r\n      <Text>\r\n        The main component in this will be a function that takes the correctly\r\n        guessed letters and is able to reveal only the characters in a string\r\n        that are in that list.\r\n      </Text>\r\n      <Title level={3}>Pseudocode</Title>\r\n      <List\r\n        itemLayout=\"horizontal\"\r\n        dataSource={data}\r\n        renderItem={(item) => (\r\n          <List.Item>\r\n            <List.Item.Meta title={item.title} description={item.description} />\r\n          </List.Item>\r\n        )}\r\n      ></List>\r\n    </>\r\n  );\r\n};\r\n","import { Button, Divider, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { Game } from \"./challenge-24/Game\";\r\nimport { Problem } from \"./challenge-24/Problem\";\r\nimport { Solution } from \"./challenge-24/Solution\";\r\n\r\nconst { Title } = Typography;\r\n\r\nexport const Challenge24: React.FC = () => {\r\n  const match = useRouteMatch();\r\n\r\n  return (\r\n    <>\r\n      <Title>Challenge 24</Title>\r\n      <Switch>\r\n        <Route path={`${match.path}/play`}>\r\n          <Game />\r\n        </Route>\r\n        <Route path={match.path}>\r\n          <>\r\n            <Link to={`${match.url}/play`}>\r\n              <Button>Play</Button>\r\n            </Link>\r\n            <Divider />\r\n            <Problem />\r\n            <Divider />\r\n            <Solution />\r\n          </>\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n};\r\n","import { Typography } from \"antd\";\r\nimport React from \"react\";\r\n\r\nconst { Paragraph, Title } = Typography;\r\n\r\nexport const Home: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Title>Home</Title>\r\n      <Paragraph>\r\n        Having a go at challenges from \"The Little Book of Programming\".\r\n      </Paragraph>\r\n    </>\r\n  );\r\n};\r\n","import { Alert, Col, Layout, Menu, Row } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AlertContext } from \"../AlertContext\";\r\n\r\nconst { Content } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nexport const MyLayout: React.FC = ({ children }) => {\r\n  const [current, setCurrent] = useState(\"home\");\r\n  const [alert, setAlert] = useState<string[]>([]);\r\n\r\n  return (\r\n    <Layout style={{ minHeight: \"100vh\" }}>\r\n      <Content>\r\n        <Menu\r\n          onClick={(e) => setCurrent(e.key as string)}\r\n          selectedKeys={[current]}\r\n          mode=\"horizontal\"\r\n        >\r\n          <Menu.Item key=\"home\">\r\n            <Link to=\"/\">Home</Link>\r\n          </Menu.Item>\r\n          <SubMenu title=\"Challenges\">\r\n            <Menu.Item key=\"challenge-24\">\r\n              <Link to=\"/challenge-24\">Challenge 24</Link>\r\n            </Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n        <Row>\r\n          <Col sm={0} md={4} lg={8}></Col>\r\n          <Col sm={24} md={16} lg={8}>\r\n            <AlertContext.Provider value={{ alert, setAlert }}>\r\n              {alert.map((msg) => (\r\n                <Alert message={msg} closable />\r\n              ))}\r\n              {children}\r\n            </AlertContext.Provider>\r\n          </Col>\r\n          <Col sm={0} md={4} lg={8}></Col>\r\n        </Row>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport { Challenge24 } from \"./components/Challenge24\";\r\nimport { Home } from \"./components/Home\";\r\nimport { MyLayout } from \"./components/Layout\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Router>\r\n      <MyLayout>\r\n        <Switch>\r\n          <Route path=\"/challenge-24\">\r\n            <Challenge24 />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </MyLayout>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import \"antd/dist/antd.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}