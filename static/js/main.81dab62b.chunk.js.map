{"version":3,"sources":["components/challenge-24/Game.tsx","components/Challenge24.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["words","alphabet","split","Game","arr","useState","Math","floor","random","length","word","alert","setAlert","lives","setLives","correctCharacters","setCorrectCharacters","play","setPlay","magicWord","reduce","acc","cur","includes","displayWord","map","letter","onClick","str","curCorrectCharacters","curLives","Challenge24","match","useRouteMatch","path","to","url","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEMA,EAAQ,CAAC,QAAS,OAClBC,EAAW,6BAA6BC,MAAM,IAUvCC,EAAiB,WAAO,IARnBC,EAQkB,EACnBC,oBATCD,EASiBJ,GAPxBI,EAAIE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SAGrC,IAIAC,EAD2B,sBAGRL,mBAAS,sBAHD,mBAG3BM,EAH2B,KAGpBC,EAHoB,OAIRP,mBAAS,GAJD,mBAI3BQ,EAJ2B,KAIpBC,EAJoB,OAKgBT,mBAAmB,IALnC,mBAK3BU,EAL2B,KAKRC,EALQ,OAMVX,oBAAS,GANC,mBAM3BY,EAN2B,KAMrBC,EANqB,KA0ClC,OACE,qCACGP,EACAM,EACC,qCACE,4BArBY,WAClB,IAAME,EAAYT,EACfR,MAAM,IACNkB,QACC,SAACC,EAAKC,GAAN,OAAeP,EAAkBQ,SAASD,GAAOD,EAAMC,EAAMD,EAAM,MACnE,IAQJ,OALIF,IAAcT,IAChBE,EAAS,YACTM,GAAQ,IAGHC,EAQGK,KACJ,2CAAcX,EAAd,uBACCZ,EAASwB,KAAI,SAACC,GAAD,OACZ,wBAAqBC,QAAS,kBA1CnBC,EA0CqCF,OAzCpDhB,EAAKa,SAASK,IAChBhB,EAAS,0BACTI,GAAqB,SAACa,GAAD,4BAChBA,GADgB,CAEnBD,SAGFhB,EAAS,qBACTE,GAAS,SAACgB,GAAD,OAAcA,EAAW,KACpB,IAAVjB,IACFD,EAAS,aACTM,GAAQ,MAZM,IAACU,GA0CX,SACGF,GADUA,SAMjB,mECjEKK,EAAwB,WACnC,IAAMC,EAAQC,cAEd,OACE,qCACE,8CACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAI,UAAKF,EAAME,KAAX,SAAX,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAMF,EAAME,KAAnB,SACE,qCACE,cAAC,IAAD,CAAMC,GAAE,UAAKH,EAAMI,IAAX,SAAR,SACE,4CAEF,qDACA,+BACE,+GAIA,6HAIA,yGAIA,iGAIF,mDACA,oMAKA,4CACA,+BACE,wNAKA,yHAIA,iJAIA,yKAIE,+BACE,kIAIA,yIAMJ,oIAGE,+BACE,sGAIA,4GC/ELC,EAAiB,WAC5B,OACE,qCACE,sCACA,oGACA,+HCyBSC,EA1BO,WACpB,OACE,eAAC,IAAD,WACE,mCACE,+BACE,6BACE,cAAC,IAAD,CAAMH,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,gBAAT,iCAKN,eAAC,IAAD,WACE,cAAC,IAAD,CAAOD,KAAK,gBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,aCXKK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.81dab62b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst words = [\"hello\", \"bye\"];\nconst alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\nconst randElem = (arr: string[]) => {\n  if (arr) {\n    return arr[Math.floor(Math.random() * arr.length)];\n  }\n\n  return \"\";\n};\n\nexport const Game: React.FC = () => {\n  const [word] = useState(randElem(words));\n\n  const [alert, setAlert] = useState(\"Guess a character!\");\n  const [lives, setLives] = useState(5);\n  const [correctCharacters, setCorrectCharacters] = useState<string[]>([]);\n  const [play, setPlay] = useState(true);\n\n  const checkLetter = (str: string) => {\n    if (word.includes(str)) {\n      setAlert(\"You guessed correctly!\");\n      setCorrectCharacters((curCorrectCharacters) => [\n        ...curCorrectCharacters,\n        str,\n      ]);\n    } else {\n      setAlert(\"Wrong, try again.\");\n      setLives((curLives) => curLives - 1);\n      if (lives === 0) {\n        setAlert(\"You lose!\");\n        setPlay(false);\n      }\n    }\n  };\n\n  // Magic Fuction\n  const displayWord = () => {\n    const magicWord = word\n      .split(\"\")\n      .reduce(\n        (acc, cur) => (correctCharacters.includes(cur) ? acc + cur : acc + \"*\"),\n        \"\"\n      );\n\n    if (magicWord === word) {\n      setAlert(\"You win!\");\n      setPlay(false);\n    }\n\n    return magicWord;\n  };\n\n  return (\n    <>\n      {alert}\n      {play ? (\n        <>\n          <p>{displayWord()}</p>\n          <p>Your have {lives} lives remaining.</p>\n          {alphabet.map((letter) => (\n            <button key={letter} onClick={() => checkLetter(letter)}>\n              {letter}\n            </button>\n          ))}\n        </>\n      ) : (\n        <p>Reload the page to play again.</p>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { Game } from \"./challenge-24/Game\";\n\nexport const Challenge24: React.FC = () => {\n  const match = useRouteMatch();\n\n  return (\n    <>\n      <h1>Challenge 24</h1>\n      <Switch>\n        <Route path={`${match.path}/play`}>\n          <Game />\n        </Route>\n        <Route path={match.path}>\n          <>\n            <Link to={`${match.url}/play`}>\n              <button>Play</button>\n            </Link>\n            <h2>Problem Description</h2>\n            <ol>\n              <li>\n                Create a program that allows users to guess a string one\n                character at a time.\n              </li>\n              <li>\n                If the user guess a character correctly reveal occurences of\n                that character in that string.\n              </li>\n              <li>\n                Characters the user has not guessed should be represented by\n                asterisks.\n              </li>\n              <li>\n                The user is given 5 incorrect guesses before it's Game Over.\n              </li>\n            </ol>\n            <h2>Possible Solution</h2>\n            <p>\n              The main component in this will be a function that takes the\n              correctly guessed letters and is able to reveal only the\n              characters in a string that are in that list.\n            </p>\n            <h3>Pseudocode</h3>\n            <ol>\n              <li>\n                Display the word using asterisks (done by the above mentioned\n                magic function which takes the word you need to guess and a list\n                of correctly guessed letters which is initially empty).\n              </li>\n              <li>\n                Ask the user to click a character (characters will be displayed\n                as a bunch of buttons).\n              </li>\n              <li>\n                The button will call a function that checks if the character is\n                in the string that the user is trying to guess.\n              </li>\n              <li>\n                If it is, the function will add it to the array of correctly\n                guessed words and then call the magic function which will update\n                the word.\n                <ol>\n                  <li>\n                    If all the words have been guessed correctly we will infom\n                    the user that they have won the game.\n                  </li>\n                  <li>\n                    Otherwise the program will call itself (asking the user for\n                    to click a another character, etc...)\n                  </li>\n                </ol>\n              </li>\n              <li>\n                Otherwise the program will inform the user that they had guessed\n                incorrectly and decrement a life.\n                <ol>\n                  <li>\n                    If the number of lives is 0 we display that they have lost\n                    the game.\n                  </li>\n                  <li>Otherwise the program will ask the user to try again.</li>\n                </ol>\n              </li>\n            </ol>\n          </>\n        </Route>\n      </Switch>\n    </>\n  );\n};\n","import React from \"react\";\n\nexport const Home: React.FC = () => {\n  return (\n    <>\n      <h1>Home</h1>\n      <p>GUI application for challenges from the little book of programming.</p>\n      <p>\n        Hopefully the layout of the page is alright even though it could do with\n        a little styling.\n      </p>\n    </>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n\nimport { Challenge24 } from \"./components/Challenge24\";\nimport { Home } from \"./components/Home\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/challenge-24\">Challenge 24</Link>\n          </li>\n        </ul>\n      </>\n\n      <Switch>\n        <Route path=\"/challenge-24\">\n          <Challenge24 />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}